# PG Interface

import logging
import postgresql.driver.dbapi20 as pg

from datetime import date, datetime, timedelta

class dbconfig:
    database        =       'framecea'        # Database to connect to. Please use an empty database for best results.
    user            =       'postgres'      # User ID to connect with
    password        =       'db2011'      # Password for given User ID
    hostname        =       'localhost'     # Hostname
    port            =       5432           # Port Number

class dbinterface:
    
    __idalarm = 0
    __idurlnext = 0

    def __init__(self, dbconfig, logging, dblock):
        self.dbconfig = dbconfig
        self.log = logging
        self.dblock = dblock
        
#        self.conn = DB2.connect (dsn = self.dbconfig.database, uid = self.dbconfig.user, pwd = self.dbconfig.password)
        self.conn = pg.connect (database = self.dbconfig.database, user = self.dbconfig.user, password = self.dbconfig.password, host =self.dbconfig.hostname, port=self.dbconfig.port)
        
	#self.conn = pg.connect(database = 'framecea', user = 'postgres', password = 'db2011', host= '127.0.0.1', port = 5432)
        #self.create_table()
        
        self.cpt = 0
        
        
    def create_table(self):
 #       try:
            cursor = self.conn.cursor()
            
            cursor.close()
#        except:
#            self.log.error("DBInterface: Something crash during createTable !")
            
    def newIdSession(self):
        request = "SELECT MAX(idsession) FROM session"
        insertLine = "INSERT INTO session(samplename,ostype) VALUES(' ',' ')"
        
        cursor = self.conn.cursor()
        
        self.dblock.acquire()
            
        cursor.execute(insertLine)
        
        cursor.execute(request)
        
        row = cursor.fetchone()
        sessionMax = row[0]
        
        #self.log.debug("Session Max ID: "+str(sessionMax))
        
        self.conn.commit()
        
        self.dblock.release()
        
        cursor.close()
        
        return sessionMax
            
            
    #(id bigint NOT NULL, idsession integer, tstamp TIMESTAMP, type varchar(256), return integer, pid int, ppid int, scontext varchar(256), nameSubject CLOB(10K), nameObject CLOB(10K), tcontext varchar(256), perms varchar(256), data CLOB(1M), FOREIGN KEY(idsession) REFERENCES session(idsession))"
    def insert(self, id, idsession, ts, type, ret, pid, ppid, scontext, nameSubject, nameObject, tcontext, perms, data):
        try:
            tsp = datetime(1601, 1, 1) + timedelta(microseconds=int(ts)/10)
            request = "INSERT INTO trace(id,idsession,tstamp,type,return,pid,ppid,scontext,nameSubject,nameObject,tcontext,perms,data) VALUES("+str(id)+","
            request = request+str(idsession)+",'"
            request = request+"0,0,0,0,0,0,0," #DB2.Timestamp(tsp.year, tsp.month, tsp.day, tsp.hour, tsp.minute, tsp.second, tsp.microsecond).get_SQL_value()+"','"
            #request = request+pg.Timestamp(tsp.year, tsp.month, tsp.day, tsp.hour, tsp.minute, tsp.second, tsp.microsecond).get_SQL_value()+"','"
            request = request+str(type)+"','"+str(ret)+"',"+str(pid)+","+str(ppid)+",'"
            request = request+scontext.replace("'","''")+"','"
            request = request+nameSubject.replace("'","''")+"','"
            request = request+nameObject.replace("'","''")+"','"
            request = request+tcontext.replace("'","''")+"','"
            request = request+perms+"','"
            request = request+data.replace("'","''")+"')"
        except:
            self.log.debug("db2interface:insertNet:"+request)
            return
        self.log.debug("InsertLine: "+request)
        cursor = self.conn.cursor()
        try:
            request = request.decode("unicode","replace")
        except:
            try:
                request = request.encode('ascii', 'xmlcharrefreplace')
                #request.encode("utf8")
            except:
                request = "%s" % request
        try:
            try:
                request = request.encode("utf8")
            except:
                print("Error encoding UTF8")
            cursor.execute(request)
        except:
            print("Error DB2: "+request)
            request = request.encode('ascii', 'xmlcharrefreplace')
            try:
                 cursor.execute(request)
            except:
                print("Error DB2 ASCII: "+request)

        if self.cpt == 1:
            self.conn.commit()
            self.cpt = 0
        else:
            self.cpt = self.cpt + 1        
        
        # self.conn.commit()
        cursor.close()
        return 1
    
    def insertNet(self, id, idsession, ts, type, ret, pid, ppid, scontext, nameSubject, ipsource, portsource, ipdest, portdest, state, typeconnect, netsize, proto, data):
        try:
            tsp = datetime(1601, 1, 1) + timedelta(microseconds=int(ts)/10)
            request = "INSERT INTO tracenet(id,idsession,tstamp,type,return,pid,ppid,scontext,nameSubject,ipSource,PortSource,ipDest,PortDest,state,typeconnect,netsize,proto,data) VALUES("+str(id)+","
            request = request+str(idsession)+",'"
            request = request+"0,0,0,0,0,0,0," #DB2.Timestamp(tsp.year, tsp.month, tsp.day, tsp.hour, tsp.minute, tsp.second, tsp.microsecond).get_SQL_value()+"','"
            request = request+str(type)+"','"+str(ret)+"',"+str(pid)+","+str(ppid)+",'"
            request = request+scontext.replace("'","''")+"','"
            request = request+nameSubject.replace("'","''")+"','"
            request = request+ipsource+"',"+portsource+",'"
            request = request+ipdest+"',"+portdest+",'"
            request = request+state+"','"+typeconnect+"',"+netsize+",'"+proto+"','"
            request = request+data.replace("'","''")+"')"
        except:
            self.log.debug("db2interface:insertNet:"+request)
            return
        #self.log.debug("InsertLine: "+request)
        cursor = self.conn.cursor()
        try:
            request = request.decode("unicode","replace")
        except:
            try:
                request = request.encode('ascii', 'xmlcharrefreplace')
                #request.encode("utf8")
            except:
                request = "%s" % request
        try:
            try:
                request = request.encode("utf8")
            except:
                print("Error encoding UTF8")
            cursor.execute(request)
        except:
            print("Error DB2: "+request)
            request = request.encode('ascii', 'xmlcharrefreplace')
            try:
                 cursor.execute(request)
            except:
                print("Error DB2 ASCII: "+request)

        if self.cpt == 1000:
            self.conn.commit()
            self.cpt = 0
        else:
            self.cpt = self.cpt + 1        
        
        # self.conn.commit()
        cursor.close()
        return 1
    
