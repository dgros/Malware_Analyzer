import logging
import MySQLdb as DB2
from datetime import date, datetime, timedelta

class dbconfig:
    database        =       'framecea'        # Database to connect to. Please use an empty database for best results.
    user            =       'postgres'      # User ID to connect with
    password        =       'db2011'      # Password for given User ID
    hostname        =       'localhost'     # Hostname
    port            =       5432           # Port Number

class dbinterface:
    
    __idalarm = 0
    __idurlnext = 0

    def __init__(self, dbconfig):
        self.dbconfig = dbconfig
        self.conn =DB2.connect ( host='127.0.0.1', db='framecea', user='root', passwd='azerty')
       # self.conn = DB2.connect ( '127.0.0.1:framecea:postgres:db2011')
        
        
        self.cpt = 0
        
            
    def newIdSession(self, boolean):
        request = "SELECT idsession FROM session"
        
        cursor = self.conn.cursor()
        
        cursor.execute(request)
        self.conn.commit()
        
 #       row = cursor.fetchall()
	if boolean == 0:
		while(1):
		        row = cursor.fetchone()
			if row == None: break
			sessionMax = row[0]
		       	print("Session ID: "+str(row[0]))

		print("Max ID : " + str(sessionMax))
        else:
		while(1):
		        row = cursor.fetchone()
			if row == None: break
			sessionMax = row[0]

        cursor.close()
        
        return sessionMax
            
            
    #(id bigint NOT NULL, idsession integer, tstamp TIMESTAMP, type varchar(256), return integer, pid int, ppid int, scontext varchar(256), nameSubject CLOB(10K), nameObject CLOB(10K), tcontext varchar(256), perms varchar(256), data CLOB(1M), FOREIGN KEY(idsession) REFERENCES session(idsession))"

	
    def dumpSContextSession(self, id):

		request = "SELECT DISTINCT SCONTEXT, pid, nameSubject  FROM trace WHERE idsession=" +str(id) 
	        cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row))

		cursor.close()
		for titi in  liste:
			print titi
		
    def dumpTContextSession(self, id):

		request = "SELECT DISTINCT tcontext from trace WHERE idsession=" +str(id) 
	        cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row[0]))
		
		cursor.close()
		for titi in  liste:
			print titi
    
    def dumpSession(self, id):

		request = "SELECT * from trace WHERE idsession=" +str(id) 
	        cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row))
		
		cursor.close()
		for titi in  liste:
			print titi
  
    def TContextForSContext(self, id, context):
		request = "SELECT DISTINCT tcontext from trace WHERE idsession=" +str(id) + " AND SCONTEXT like '%" + str(context) + "%'" 
	        print request
		cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row[0]))
		
		cursor.close()
		for titi in  liste:
			print titi

    def SContextForTContext(self, id, context):
		request = "SELECT scontext from trace WHERE idsession=" +str(id) + " AND TCONTEXT like '%" + str(context) + "%'" 
	        print request
		cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row[0]))
		
		cursor.close()
		for titi in  liste:
			print titi

    def AccessForContext(self, id, scontext, tcontext):
		request = "SELECT * from trace WHERE idsession=" +str(id) + " AND SCONTEXT like '%" + str(scontext) + "%' AND TCONTEXT like '%" + str(tcontext) + "%'" 
	        print request
		cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row))
		cursor.close()
		for item in liste:
			print item

    def SpecificAccess(self, id, droit):
		request = "SELECT * from trace WHERE idsession=" +str(id) + " AND PERMS like ' " + str(droit)  +" '" 
	        print request
		cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row))
		cursor.close()
		for item in liste:
			print item
    def SpecificAccessForScontext(self, id, droit, scontext):
		request = "SELECT * from trace WHERE idsession=" +str(id) + " AND PERMS like ' " + str(droit)  +" '  AND SCONTEXT  like '%" + str(scontext)+ "%'"  
	        print request
		cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row))
		cursor.close()
		for item in liste:
			print item

    def LoadAll(self, id):
		request = "SELECT * from trace WHERE idsession=" +str(id) + " AND TYPE like 'load'" 
	        print request
		cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row))
		cursor.close()
		for item in liste:
			print item

    def LoadForContext(self, id, scontext):
		request = "SELECT * from trace WHERE idsession=" +str(id) + " AND TYPE like 'load' AND SCONTEXT like '%" + str(scontext) +"%'" 
	        print request
		cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row))
		cursor.close()
		for item in liste:
			print item


    def dumpIPSession(self, id):

		request = "SELECT scontext,ipSource, PortSource,ipDest,PortDest, proto  from tracenet WHERE idsession=" +str(id) 
	        cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row))

		cursor.close()
		for item in liste:
			print item

    def dumpIPScontext(self, id, scontext):

		request = "SELECT ipSource, PortSource,ipDest,PortDest, proto  from tracenet WHERE idsession=" +str(id) + " AND SCONTEXT like '%" + str(scontext) +"%'"
	        cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row))

		cursor.close()
		for item in liste:
			print item
	
    def dumpIPProto(self, id, proto):

		request = "SELECT scontext,ipSource, PortSource,ipDest,PortDest  from tracenet WHERE idsession=" +str(id) + " AND proto like '%" + str(proto) +"%'"
	        cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row))

		cursor.close()
		for item in liste:
			print item
	
	
    def dumpIPAccess(self, id, scontext, proto):

		request = "SELECT ipSource, PortSource,ipDest,PortDest  from tracenet WHERE idsession=" +str(id) + " AND proto like '%" + str(proto) +"%' AND SCONTEXT like '%" + str(scontext) +"%'"
	        cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row))

		cursor.close()
		for item in liste:
			print item

    def dumpIPStato(self, id, scontext):

		request = "SELECT scontext,ipSource, PortSource,ipDest,PortDest, state  from tracenet WHERE idsession=" +str(id) + " AND proto like '%" + str(proto) +"%'"
	        cursor = self.conn.cursor()
		cursor.execute(request)
		liste = []
		while(1):
			row = cursor.fetchone()
			if row == None: break
			liste.append(str(row))

		cursor.close()
		for item in liste:
			print item

	#	[tri.append(item.lstrip()) for item in liste if not item.lstrip() in tri]
	#	tri.sort()
	
"""
    def insertNet(self, id, idsession, ts, type, ret, pid, ppid, scontext, nameSubject, ipsource, portsource, ipdest, portdest, state, typeconnect, netsize, proto, data):
        try:
            tsp = datetime(1601, 1, 1) + timedelta(microseconds=int(ts)/10)
            request = "INSERT INTO tracenet(id,idsession,tstamp,type,return,pid,ppid,scontext,nameSubject,ipSource,PortSource,ipDest,PortDest,state,typeconnect,netsize,proto,data) VALUES("+str(id)+","
            request = request+str(idsession)+",'"
            request = request+DB2.Timestamp(tsp.year, tsp.month, tsp.day, tsp.hour, tsp.minute, tsp.second, tsp.microsecond).get_SQL_value()+"','"
            request = request+str(type)+"','"+str(ret)+"',"+str(pid)+","+str(ppid)+",'"
            request = request+scontext.replace("'","''")+"','"
            request = request+nameSubject.replace("'","''")+"','"
            request = request+ipsource+"',"+portsource+",'"
            request = request+ipdest+"',"+portdest+",'"
            request = request+state+"','"+typeconnect+"',"+netsize+",'"+proto+"','"
            request = request+data.replace("'","''")+"')"
        except:
            self.log.debug("db2interface:insertNet:"+request)
            return
        #self.log.debug("InsertLine: "+request)
        cursor = self.conn.cursor()
        try:
            request = request.decode("unicode","replace")
        except:
            try:
                request = request.encode('ascii', 'xmlcharrefreplace')
                #request.encode("utf8")
            except:
                request = "%s" % request
        try:
            try:
                request = request.encode("utf8")
            except:
                print("Error encoding UTF8")
            cursor.execute(request)
        except:
            print("Error DB2: "+request)
            request = request.encode('ascii', 'xmlcharrefreplace')
            try:
                 cursor.execute(request)
            except:
                print("Error DB2 ASCII: "+request)

        if self.cpt == 1000:
            self.conn.commit()
            self.cpt = 0
        else:
            self.cpt = self.cpt + 1        
        
        # self.conn.commit()
        cursor.close()
        return 1
""" 
