import re
from xmlParser import parseTrace
class readTrace:

    __file = ""
    __pattern_start="<trace.*>"
    __pattern_end="</trace>"
    __pattern_complete = "<trace>.*</trace>.*"

    def __init__(self, data, logging, dbinterface, rest):
        self.__log = logging
        if rest[-1:] == "\"":
            self.__log.debug("Found a missing space")
            rest = rest + " "
        if rest[-8:] == "<process":
            self.__log.debug("Found a missing space")
            rest = rest + " "
        if rest[-7:] == "<object":
            self.__log.debug("Found a missing space")
            rest = rest + " "       
        if rest[-6:] == "<class":
            self.__log.debug("Found a missing space")
            rest = rest + " "    
        if rest[-6:] == "<trace":
            self.__log.debug("Found a missing space")
            rest = rest + " "  
        
        strdata = data.getData().decode('windows-1252','replace').replace(u'\xa0', "&nbsp;")
        strdata = strdata.replace("&", "&amp;")
        strdata = strdata.replace(u'\xe9', "&amp;")
        #strdata = strdata.decode("utf8" ) 

        self.__file = rest + strdata
        self.__idsession = data.getSession()
        self.__prog_start = re.compile(self.__pattern_start)
        self.__prog_end = re.compile(self.__pattern_end)
        self.__prog_complete = re.compile(self.__pattern_complete)

        self.__dbinterface = dbinterface
        
    def compute(self):
        trace = ""
        completeTrace = False
        lines = self.__file.splitlines(True)
        beginTrace = False
        
        for line in lines:
            #print(line)
            if self.__prog_start.match(line):
                beginTrace= True
                trace = line
                completeTrace=False
            elif self.__prog_end.match(line):
                if not beginTrace:
                    self.__log.debug("End but no start ???")
                trace = trace+line
                #self.__log.debug("readTrace: compute: call parseTrace")
                xTrace = parseTrace(trace, self.__idsession, self.__log, self.__dbinterface)
                completeTrace = True
                trace = ""
                if not xTrace.isCrash():
                    xTrace.insertTrace()
                    #print(xTrace.getID())
                #self.__log.debug("readTrace: compute: end() !")
            elif self.__prog_complete.match(line):
                self.__log.debug("readTrace: Compute: Complete Line: Error ??")
            elif completeTrace:
                trace = trace + line
            else:
                trace = trace+line
    
        return trace