'''
Created on Feb 18, 2010

@author: arrouan
'''
import threading
import time
from line import readTrace

class lineThread(threading.Thread):
    def __init__(self, qu, logging, dbinterface):
        threading.Thread.__init__(self)
        self.Terminated = False
        self.__toRead = qu
        self.__log = logging
        self.__dbinterface = dbinterface
        
        
    def run(self):
        #self.__log.debug("lineThread: run")
        while not self.Terminated:
            #self.__log.debug("lineThread: loop")
            rest = ""
            i = 0
            while self.__toRead.qsize() > 0:
                if i == 1000:
                    self.__log.debug("Queue size: "+str(self.__toRead.qsize()))
                    i=0
                else:
                    i = i + 1
                rt = readTrace(self.__toRead.get(), self.__log, self.__dbinterface, rest)
                rest = rt.compute()
                #self.__log.debug("Rest: "+rest)
            #self.__log.debug("lineThread: sleep")
            time.sleep(2.0)
        
    def stop(self):
        self.Terminated = True   