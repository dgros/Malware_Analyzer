import logging
import DB2
from datetime import date, datetime, timedelta

class dbconfig:
    database        =       'framecea'        # Database to connect to. Please use an empty database for best results.
    user            =       'db2inst1'      # User ID to connect with
    password        =       'db2011'      # Password for given User ID
    hostname        =       'localhost'     # Hostname
    port            =       60000           # Port Number

class dbinterface:
    
    __idalarm = 0
    __idurlnext = 0

    def __init__(self, dbconfig, logging, dblock):
        self.dbconfig = dbconfig
        self.log = logging
        self.dblock = dblock
        
        self.conn = DB2.connect (dsn = self.dbconfig.database, uid = self.dbconfig.user, pwd = self.dbconfig.password)
        
        self.create_table()
        
        self.cpt = 0
        
        
    def create_table(self):
 #       try:
            cursor = self.conn.cursor()
            
            
            sessionExist = "SELECT NAME FROM SYSIBM.SYSTABLES WHERE NAME='SESSION'"
            sessionTable = "create table session (idsession integer GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1) primary key, samplename varchar(256), ostype varchar(256))"
            traceExist = "SELECT NAME FROM SYSIBM.SYSTABLES WHERE NAME='TRACE'"
            #traceTable = "create table trace (id bigint NOT NULL, idsession integer, tstamp TIMESTAMP, type varchar(256), return varchar(200), pid int, ppid int, scontext CLOB(10K), nameSubject CLOB(10K), nameObject CLOB(10K), tcontext CLOB(10K), perms varchar(256), data CLOB(1M), FOREIGN KEY(idsession) REFERENCES session(idsession))"
            traceTable = "create table trace (id bigint NOT NULL, idsession integer, tstamp TIMESTAMP, type varchar(256), return varchar(200), pid int, ppid int, scontext VARCHAR(4096), nameSubject VARCHAR(4096), nameObject VARCHAR(4096), tcontext VARCHAR(4096), perms varchar(256), data CLOB(1M), FOREIGN KEY(idsession) REFERENCES session(idsession))"
            traceIndex_1 = "CREATE INDEX IDX_TRACE_SCONTEXT ON TRACE ( SCONTEXT )"
            traceIndex_2 = "CREATE INDEX IDX_TRACE_TCONTEXT ON TRACE ( TCONTEXT )"
            traceIndex_3 = "CREATE INDEX IDX_TRACE_TYPE ON TRACE ( TYPE )"
            traceIndex_4 = "CREATE INDEX IDX_TRACE_PERMS ON TRACE ( PERMS )"
            traceIndex_5 = "CREATE INDEX IDX_TRACE_IDSESSION ON TRACE ( IDSESSION )"
            
            traceNetExist = "SELECT NAME FROM SYSIBM.SYSTABLES WHERE NAME='TRACENET'"
            #traceNetTable = "create table tracenet (id bigint NOT NULL, idsession integer, tstamp TIMESTAMP, type varchar(256), return varchar(200), pid int, ppid int, scontext CLOB(10K), nameSubject CLOB(10K), ipSource VARCHAR(256), PortSource INT, ipDest VARCHAR(256), PortDest INT, state VARCHAR(256), typeconnect VARCHAR(256), netsize INT, proto VARCHAR(256), data CLOB(1M), FOREIGN KEY(idsession) REFERENCES session(idsession))"
            traceNetTable = "create table tracenet (id bigint NOT NULL, idsession integer, tstamp TIMESTAMP, type varchar(256), return varchar(200), pid int, ppid int, scontext VARCHAR(4096), nameSubject VARCHAR(4096), ipSource VARCHAR(256), PortSource INT, ipDest VARCHAR(256), PortDest INT, state VARCHAR(256), typeconnect VARCHAR(256), netsize INT, proto VARCHAR(256), data CLOB(1M), FOREIGN KEY(idsession) REFERENCES session(idsession))"
            traceNetIndex_1 = "CREATE INDEX IDX_TRACE_IDSESSION ON TRACENET ( IDSESSION )"
            traceNetIndex_2 = "CREATE INDEX IDX_TRACENET_SCONTEXT ON TRACENET ( SCONTEXT )"
            traceNetIndex_3 = "CREATE INDEX IDX_TRACENET_PROTO ON TRACENET ( PROTO )"
            
            cursor.execute(sessionExist)

            rows = cursor.fetchall()
            cpt = 0
            for row in rows:
                cpt = cpt + 1
                
            if cpt == 0:
                self.log.debug("create session table")
                cursor.execute(sessionTable)

            cursor.execute(traceExist)

            rows = cursor.fetchall()
            cpt = 0
            for row in rows:
                cpt = cpt + 1
                
            if cpt == 0:
                self.log.debug("create trace table")
                cursor.execute(traceTable)
                cursor.execute(traceIndex_1)
                cursor.execute(traceIndex_2)
                cursor.execute(traceIndex_3)
                cursor.execute(traceIndex_4)
                cursor.execute(traceIndex_5)
                
                
            cursor.execute(traceNetExist)

            rows = cursor.fetchall()
            cpt = 0
            for row in rows:
                cpt = cpt + 1
                
            if cpt == 0:
                self.log.debug("create tracenet table")
                cursor.execute(traceNetTable)
                cursor.execute(traceNetIndex_1)
                cursor.execute(traceNetIndex_2)
                cursor.execute(traceNetIndex_3)
                
            self.conn.commit()
            cursor.close()
#        except:
#            self.log.error("DBInterface: Something crash during createTable !")
            
    def newIdSession(self):
        request = "SELECT MAX(idsession) FROM session"
        insertLine = "INSERT INTO session(samplename,ostype) VALUES(' ',' ')"
        
        cursor = self.conn.cursor()
        
        self.dblock.acquire()
            
        cursor.execute(insertLine)
        
        cursor.execute(request.encode("utf-8","replace"))
        
        row = cursor.fetchone()
        sessionMax = row[0]
        
        #self.log.debug("Session Max ID: "+str(sessionMax))
        
        self.conn.commit()
        
        self.dblock.release()
        
        cursor.close()
        
        return sessionMax
            
            
    #(id bigint NOT NULL, idsession integer, tstamp TIMESTAMP, type varchar(256), return integer, pid int, ppid int, scontext varchar(256), nameSubject CLOB(10K), nameObject CLOB(10K), tcontext varchar(256), perms varchar(256), data CLOB(1M), FOREIGN KEY(idsession) REFERENCES session(idsession))"
    def insert(self, id, idsession, ts, type, ret, pid, ppid, scontext, nameSubject, nameObject, tcontext, perms, data):
        try:
            tsp = datetime(1601, 1, 1) + timedelta(microseconds=int(ts)/10)
            request = "INSERT INTO trace(id,idsession,tstamp,type,return,pid,ppid,scontext,nameSubject,nameObject,tcontext,perms,data) VALUES("+str(id)+","
            request = request+str(idsession)+",'"
            request = request+DB2.Timestamp(tsp.year, tsp.month, tsp.day, tsp.hour, tsp.minute, tsp.second, tsp.microsecond).get_SQL_value()+"','"
            request = request+str(type)+"','"+str(ret)+"',"+str(pid)+","+str(ppid)+",'"
            request = request+scontext.replace("'","''")+"','"
            request = request+nameSubject.replace("'","''")+"','"
            request = request+nameObject.replace("'","''")+"','"
            request = request+tcontext.replace("'","''")+"','"
            request = request+perms+"','"
            request = request+data.replace("'","''")+"')"
        except:
            self.log.debug("db2interface:insertNet:"+request)
            return
        #self.log.debug("InsertLine: "+request)
        cursor = self.conn.cursor()
        try:
            request = request.decode("unicode","replace")
        except:
            try:
                request = request.encode('ascii', 'xmlcharrefreplace')
                #request.encode("utf8")
            except:
                request = "%s" % request
        try:
            try:
                request = request.encode("utf8")
            except:
                print("Error encoding UTF8")
            cursor.execute(request)
        except:
            print("Error DB2: "+request)
            request = request.encode('ascii', 'xmlcharrefreplace')
            try:
                 cursor.execute(request)
            except:
                print("Error DB2 ASCII: "+request)

        if self.cpt == 1000:
            self.conn.commit()
            self.cpt = 0
        else:
            self.cpt = self.cpt + 1        
        
        # self.conn.commit()
        cursor.close()
        return 1
    
    def insertNet(self, id, idsession, ts, type, ret, pid, ppid, scontext, nameSubject, ipsource, portsource, ipdest, portdest, state, typeconnect, netsize, proto, data):
        try:
            tsp = datetime(1601, 1, 1) + timedelta(microseconds=int(ts)/10)
            request = "INSERT INTO tracenet(id,idsession,tstamp,type,return,pid,ppid,scontext,nameSubject,ipSource,PortSource,ipDest,PortDest,state,typeconnect,netsize,proto,data) VALUES("+str(id)+","
            request = request+str(idsession)+",'"
            request = request+DB2.Timestamp(tsp.year, tsp.month, tsp.day, tsp.hour, tsp.minute, tsp.second, tsp.microsecond).get_SQL_value()+"','"
            request = request+str(type)+"','"+str(ret)+"',"+str(pid)+","+str(ppid)+",'"
            request = request+scontext.replace("'","''")+"','"
            request = request+nameSubject.replace("'","''")+"','"
            request = request+ipsource+"',"+portsource+",'"
            request = request+ipdest+"',"+portdest+",'"
            request = request+state+"','"+typeconnect+"',"+netsize+",'"+proto+"','"
            request = request+data.replace("'","''")+"')"
        except:
            self.log.debug("db2interface:insertNet:"+request)
            return
        #self.log.debug("InsertLine: "+request)
        cursor = self.conn.cursor()
        try:
            request = request.decode("unicode","replace")
        except:
            try:
                request = request.encode('ascii', 'xmlcharrefreplace')
                #request.encode("utf8")
            except:
                request = "%s" % request
        try:
            try:
                request = request.encode("utf8")
            except:
                print("Error encoding UTF8")
            cursor.execute(request)
        except:
            print("Error DB2: "+request)
            request = request.encode('ascii', 'xmlcharrefreplace')
            try:
                 cursor.execute(request)
            except:
                print("Error DB2 ASCII: "+request)

        if self.cpt == 1000:
            self.conn.commit()
            self.cpt = 0
        else:
            self.cpt = self.cpt + 1        
        
        # self.conn.commit()
        cursor.close()
        return 1
    