#ifndef _DRIVER_
#define _DRIVER_

#include <ntifs.h>
#include <ntddk.h>
#include <stdio.h>
#include <tdi.h>
#include "shared.h"

#define DRIVER_NAME L"DKF"

#define MUTEX_INIT(v)      KeInitializeMutex( &v, 0 )
#define MUTEX_WAIT(v)      KeWaitForMutexObject( &v, Executive, KernelMode, FALSE, NULL )
#define MUTEX_RELEASE(v)   KeReleaseMutex( &v, FALSE ) 

#define FILE_DEVICE_DKF     0x12345678
#define IOCTL_DKF_START     (ULONG) CTL_CODE(FILE_DEVICE_DKF,0x00, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_DKF_STOP      (ULONG) CTL_CODE(FILE_DEVICE_DKF,0x01, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_DKF_SHUTDOWN      (ULONG) CTL_CODE(FILE_DEVICE_DKF,0x02, METHOD_BUFFERED, FILE_ANY_ACCESS)



//Structure contenant les informations sur le processus courant
typedef struct ProcessInformation{
	ULONG pid;
	ULONG ppid;
	UCHAR *name;
	PUNICODE_STRING pathname;
	// UNICODE_STRING pathname;
} ProcessInformation;

typedef struct ProcessInformationFile{
	ULONG pid;
	ULONG ppid;
	UCHAR *name;
	char pathname[1024];
} ProcessInformationFile;


typedef struct _DEVICE_CONTEXT
{
	PDRIVER_OBJECT  pDriverObject;       
    PDEVICE_OBJECT  pDeviceObject;
	LARGE_INTEGER RegCookie;
}
DEVICE_CONTEXT, *PDEVICE_CONTEXT; 


KMUTEX Mutex;


// Fonctions non declarees dans les headers classique
UCHAR *PsGetProcessImageFileName( IN PEPROCESS Process );

NTSYSAPI
NTSTATUS
NTAPI ZwQueryInformationProcess(
  __in       HANDLE ProcessHandle,
  __in       PROCESSINFOCLASS ProcessInformationClass,
  __out      PVOID ProcessInformation,
  __in       ULONG ProcessInformationLength,
  __out_opt  PULONG ReturnLength
);

NTSTATUS DriverEntry( IN PDRIVER_OBJECT  DriverObject, IN PUNICODE_STRING RegistryPath );
NTSTATUS RegistryCallback(IN PVOID CallbackContext, IN PVOID  Argument1, IN PVOID  Argument2);
// VOID CreateRoutine( __in_opt PUNICODE_STRING  FullImageName, __in HANDLE  ProcessId, __in PIMAGE_INFO  ImageInfo  );
VOID DriverUnload(IN PDRIVER_OBJECT DriverObject);
NTSTATUS DriverDispatch(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);
NTSTATUS DrvWrite(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);
NTSTATUS DrvCreateClose(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);
NTSTATUS Hook_Function();
void Unhook_fonction();
ProcessInformation GetProcessInfo();
ProcessInformationFile GetProcessInfoFile();
void checkSSDT();
void WriteInLog(char *droit, int pid, char * path,int  ppid,char * obj_path,char * scontext, char * tcontext, char * class, NTSTATUS status, LONG size);
void GetSecurityContextSubject(ProcessInformationFile process, char * security_type);
void GetSecurityContextSubjectReg(char * name, char * security_type);
VOID FonctionDeLaMortQuiTueQuiFaitDesBSODEtQueMemeLesLinuxiensNePeuventPasFaireParceQuIlsSontJaloux();
void TransformToContext(ANSI_STRING ansi, char * context);
void GetDroit(char * droit, PREG_CREATE_KEY_INFORMATION pInfo);
void GetDroitFile( ACCESS_MASK DesiredAccess, char * droit);
void TransformToContextFile(ANSI_STRING ansi, char * context);



// #ifdef ALLOC_PRAGMA
// #pragma alloc_text(INIT, DriverEntry)
// #pragma alloc_text(PAGE, NtWriteFile) 
// #pragma alloc_text(PAGE, NtReadFile) 
// #pragma alloc_text(PAGE, NtOpenFile) 
// #pragma alloc_text(PAGE, NtCreateFile) 
// #pragma alloc_text(PAGE, GetProcessInfo )
// #pragma alloc_text(PAGE, GetProcessInfoFile) 
// #endif

#pragma pack(1)
typedef struct ServiceDescriptorEntry {
        unsigned int *ServiceTableBase;
        unsigned int *ServiceCounterTableBase; //Used only in checked build
        unsigned int NumberOfServices;
        unsigned char *ParamTableBase;
} ServiceDescriptorTableEntry_t, *PServiceDescriptorTableEntry_t;
#pragma pack()

__declspec(dllimport)  ServiceDescriptorTableEntry_t KeServiceDescriptorTable;
#define SYSTEMSERVICE(_function)  KeServiceDescriptorTable.ServiceTableBase[ *(PULONG)((PUCHAR)_function+1)]

PMDL  g_pmdlSystemCall;
PVOID *MappedSystemCallTable;
int IsHooked;
HANDLE handlelog;
HANDLE handlenet;
int trace;
int trace_net;
// HANDLE UserLandID;
HANDLE UserLandID;


#define ABSOLUTE(wait) (wait)

#define RELATIVE(wait) (-(wait))

#define NANOSECONDS(nanos) \
(((signed __int64)(nanos)) / 100L)

#define MICROSECONDS(micros) \
(((signed __int64)(micros)) * NANOSECONDS(1000L))

#define MILLISECONDS(milli) \
(((signed __int64)(milli)) * MICROSECONDS(1000L))

#define SECONDS(seconds) \
(((signed __int64)(seconds)) * MILLISECONDS(1000L))

// Fonctions hookees

//NtDeviceIoControlFile

NTSYSAPI
NTSTATUS
NTAPI NtDeviceIoControlFile(
  __in       HANDLE FileHandle,
  __in_opt   HANDLE Event,
  __in_opt   PIO_APC_ROUTINE ApcRoutine,
  __in_opt   PVOID ApcContext,
  __out      PIO_STATUS_BLOCK IoStatusBlock,
  __in       ULONG IoControlCode,
  __in_opt   PVOID InputBuffer,
  __in       ULONG InputBufferLength,
  __out_opt  PVOID OutputBuffer,
  __in       ULONG OutputBufferLength
);

typedef NTSTATUS (*NTDEVICEIOCONTROLFILE)(
__in       HANDLE FileHandle,
  __in_opt   HANDLE Event,
  __in_opt   PIO_APC_ROUTINE ApcRoutine,
  __in_opt   PVOID ApcContext,
  __out      PIO_STATUS_BLOCK IoStatusBlock,
  __in       ULONG IoControlCode,
  __in_opt   PVOID InputBuffer,
  __in       ULONG InputBufferLength,
  __out_opt  PVOID OutputBuffer,
  __in       ULONG OutputBufferLength);
  
NTDEVICEIOCONTROLFILE OldNtDeviceIoControlFile;

NTSTATUS NewNtDeviceIoControlFile(
  __in       HANDLE FileHandle,
  __in_opt   HANDLE Event,
  __in_opt   PIO_APC_ROUTINE ApcRoutine,
  __in_opt   PVOID ApcContext,
  __out      PIO_STATUS_BLOCK IoStatusBlock,
  __in       ULONG IoControlCode,
  __in_opt   PVOID InputBuffer,
  __in       ULONG InputBufferLength,
  __out_opt  PVOID OutputBuffer,
  __in       ULONG OutputBufferLength
);


// Fin NtDeviceIoControlFile

NTSYSAPI
NTSTATUS
NTAPI
 NtOpenProcess(
  __out     PHANDLE ProcessHandle,
  __in      ACCESS_MASK DesiredAccess,
  __in      POBJECT_ATTRIBUTES ObjectAttributes,
  __in_opt  PCLIENT_ID ClientId
);


typedef NTSTATUS (*NTOPENPROCESS)(
 __out     PHANDLE ProcessHandle,
  __in      ACCESS_MASK DesiredAccess,
  __in      POBJECT_ATTRIBUTES ObjectAttributes,
  __in_opt  PCLIENT_ID ClientId
);

NTOPENPROCESS OldNtOpenProcess;

NTSTATUS NewNtOpenProcess(
  __out     PHANDLE ProcessHandle,
  __in      ACCESS_MASK DesiredAccess,
  __in      POBJECT_ATTRIBUTES ObjectAttributes,
  __in_opt  PCLIENT_ID ClientId
);

NTSYSAPI
NTSTATUS
NTAPI NtTerminateProcess(
  __in_opt  HANDLE ProcessHandle,
  __in      NTSTATUS ExitStatus
);

typedef NTSTATUS (*NTTERMINATEPROCESS)(
	__in_opt  HANDLE ProcessHandle,
	__in      NTSTATUS ExitStatus
);

NTTERMINATEPROCESS OldNtTerminateProcess;

NTSTATUS  NewNtTerminateProcess(
  __in_opt  HANDLE ProcessHandle,
  __in      NTSTATUS ExitStatus
);


//NtCreateSection
NTSYSAPI 
NTSTATUS
NTAPI
NtCreateSection(
	OUT PHANDLE SectionHandle, 
	IN ULONG DesiredAccess, 
	IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL, 
	IN PLARGE_INTEGER MaximumSize OPTIONAL, 
	IN ULONG PageAttributess, 
	IN ULONG SectionAttributes, 
	IN HANDLE FileHandle OPTIONAL ); 
	
typedef NTSTATUS (*NTCREATESECTION)(
	HANDLE SectionHandle, 
	ULONG DesiredAccess, 
	POBJECT_ATTRIBUTES ObjectAttributes ,
	PLARGE_INTEGER MaximumSize,
	ULONG PageAttributess, 
	LONG SectionAttributes, 
	HANDLE FileHandle ); 
	
NTCREATESECTION OldNtCreateSection;

NTSTATUS NewNtCreateSection(
	OUT PHANDLE SectionHandle, 
	IN ULONG DesiredAccess, 
	IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL, 
	IN PLARGE_INTEGER MaximumSize OPTIONAL, 
	IN ULONG PageAttributess, 
	IN ULONG SectionAttributes, 
	IN HANDLE FileHandle OPTIONAL ); 

// Fin NtCreateSection


//Relatif aux fichiers
NTSYSAPI
NTSTATUS
NTAPI
 NtOpenFile(
  __out  PHANDLE FileHandle,
  __in   ACCESS_MASK DesiredAccess,
  __in   POBJECT_ATTRIBUTES ObjectAttributes,
  __out  PIO_STATUS_BLOCK IoStatusBlock,
  __in   ULONG ShareAccess,
  __in   ULONG OpenOptions
);

typedef NTSTATUS (*NTOPENFILE) (
  __out  PHANDLE FileHandle,
  __in   ACCESS_MASK DesiredAccess,
  __in   POBJECT_ATTRIBUTES ObjectAttributes,
  __out  PIO_STATUS_BLOCK IoStatusBlock,
  __in   ULONG ShareAccess,
  __in   ULONG OpenOptions
);

NTOPENFILE OldNtOpenFile;

NTSTATUS  NewNtOpenFile(
  __out  PHANDLE FileHandle,
  __in   ACCESS_MASK DesiredAccess,
  __in   POBJECT_ATTRIBUTES ObjectAttributes,
  __out  PIO_STATUS_BLOCK IoStatusBlock,
  __in   ULONG ShareAccess,
  __in   ULONG OpenOptions
);

// Relatif a NtCreateFile
NTSYSAPI
NTSTATUS
NTAPI
NtCreateFile(
    OUT PHANDLE phFile,
    IN ACCESS_MASK DesiredAccess,
    IN POBJECT_ATTRIBUTES ObjectAttributes,
    OUT PIO_STATUS_BLOCK IoStatusBlock,
    IN PLARGE_INTEGER AllocationSize OPTIONAL,
    IN ULONG FileAttributes,
    IN ULONG ShareAccess,
    IN ULONG CreateDisposition,
    IN ULONG CreateOptions,
    IN PVOID EaBuffer OPTIONAL,
    IN ULONG EaLength
);

typedef NTSTATUS (*NTCREATEFILE)(
            PHANDLE FileHandle,
            ACCESS_MASK DesiredAccess,
            POBJECT_ATTRIBUTES ObjectAttributes,
            PIO_STATUS_BLOCK IoStatusBlock,
            PLARGE_INTEGER AllocationSize OPTIONAL,
            ULONG FileAttributes,
            ULONG ShareAccess,
            ULONG CreateDisposition,
            ULONG CreateOptions,
            PVOID EaBuffer OPTIONAL,
            ULONG EaLength
);

NTCREATEFILE OldNtCreateFile;

NTSTATUS NewNtCreateFile(
                    PHANDLE FileHandle,
                    ACCESS_MASK DesiredAccess,
                    POBJECT_ATTRIBUTES ObjectAttributes,
                    PIO_STATUS_BLOCK IoStatusBlock,
                    PLARGE_INTEGER AllocationSize OPTIONAL,
                    ULONG FileAttributes,
                    ULONG ShareAccess,
                    ULONG CreateDisposition,
                    ULONG CreateOptions,
                    PVOID EaBuffer OPTIONAL,
                    ULONG EaLength
);
// fin de Relatif a NtCreateFile


NTSYSAPI 
NTSTATUS
NTAPI
NtReadFile (
    __in HANDLE FileHandle,
    __in_opt HANDLE Event,
    __in_opt PIO_APC_ROUTINE ApcRoutine,
    __in_opt PVOID ApcContext,
    __out PIO_STATUS_BLOCK IoStatusBlock,
    __out_bcount(Length) PVOID Buffer,
    __in ULONG Length,
    __in_opt PLARGE_INTEGER ByteOffset,
    __in_opt PULONG Key
    );

typedef NTSTATUS (*NTREADFILE) (
    __in HANDLE FileHandle,
    __in_opt HANDLE Event,
    __in_opt PIO_APC_ROUTINE ApcRoutine,
    __in_opt PVOID ApcContext,
    __out PIO_STATUS_BLOCK IoStatusBlock,
    __out_bcount(Length) PVOID Buffer,
    __in ULONG Length,
    __in_opt PLARGE_INTEGER ByteOffset,
    __in_opt PULONG Key
    );

NTREADFILE OldNtReadFile;

NTSTATUS NewNtReadFile (
    __in HANDLE FileHandle,
    __in_opt HANDLE Event,
    __in_opt PIO_APC_ROUTINE ApcRoutine,
    __in_opt PVOID ApcContext,
    __out PIO_STATUS_BLOCK IoStatusBlock,
    __out_bcount(Length) PVOID Buffer,
    __in ULONG Length,
    __in_opt PLARGE_INTEGER ByteOffset,
    __in_opt PULONG Key
    );

	
NTSYSAPI 
NTSTATUS
NTAPI
NtWriteFile (
    __in HANDLE FileHandle,
    __in_opt HANDLE Event,
    __in_opt PIO_APC_ROUTINE ApcRoutine,
    __in_opt PVOID ApcContext,
    __out PIO_STATUS_BLOCK IoStatusBlock,
    __in_bcount(Length) PVOID Buffer,
    __in ULONG Length,
    __in_opt PLARGE_INTEGER ByteOffset,
    __in_opt PULONG Key
    );
	
typedef NTSTATUS (*NTWRITEFILE) (
    __in HANDLE FileHandle,
    __in_opt HANDLE Event,
    __in_opt PIO_APC_ROUTINE ApcRoutine,
    __in_opt PVOID ApcContext,
    __out PIO_STATUS_BLOCK IoStatusBlock,
    __in_bcount(Length) PVOID Buffer,
    __in ULONG Length,
    __in_opt PLARGE_INTEGER ByteOffset,
    __in_opt PULONG Key
    );

NTWRITEFILE OldNtWriteFile;

NTSTATUS NewNtWriteFile (
    __in HANDLE FileHandle,
    __in_opt HANDLE Event,
    __in_opt PIO_APC_ROUTINE ApcRoutine,
    __in_opt PVOID ApcContext,
    __out PIO_STATUS_BLOCK IoStatusBlock,
    __in_bcount(Length) PVOID Buffer,
    __in ULONG Length,
    __in_opt PLARGE_INTEGER ByteOffset,
    __in_opt PULONG Key
    );
// NtReadFile




#endif
